<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Copyright (C) 2013 Andrei Olaru. See the AUTHORS file for more information.
  
  This file is part of AmIciTy-Mi.
  
  AmIciTy-Mi is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
  
  AmIciTy-Mi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License along with AmIciTy-Mi.  If not, see <http://www.gnu.org/licenses/>.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.example.org/selectionSchema"
	elementFormDefault="qualified" targetNamespace="http://www.example.org/selectionSchema">


	<complexType name="coordinates">
		<all>
			<element name="x" type="decimal" />
			<element name="y" type="decimal" />
		</all>
	</complexType>

	<!-- 
		An area is described by a function and center location.
		
		Inside is particular : 
		- if the value is true, it means that agents in
		the area of the function will be add at the set of agents of 
		the final area of "selectionAction".
		- if the value is false, it means that agents in the area of the function
		will be removed of the final area of "selectionAction".
		
		These ADD and REMOVE action depends of the order of the area function.
		It executed with a linear way.
		
		Area could depend of the time : it could grow up with the time.
		Example : circle equation =  x^2 + y^2 < 3+t
			
	 -->
	<complexType name="areaFunction">
		<sequence>
			<element name="function" type="string" />
			<element name="centerCoordinates" type="tns:coordinates" />
			<element name="inside" type="boolean" />
		</sequence>
	</complexType>

	<!--
		Unpause not implemented : some rules to define.
		(priority : unpause and pause from two different "selectionAction")
		An improvement of the algorithm could be done.
		
		For the moment, pause has a superior priority compared to unpause.
		
		First function need to be inside[yes] in theory, because if it's
		inside[false], you try to remove agents in an empty set of agents.
		
		Area could depend of the time : it could grow up with the time.
		Example : circle equation =  x^2 + y^2 < 3+t
		
	-->
	<complexType name="selectionAction">
		<sequence>
			<element name="area" type="tns:areaFunction" minOccurs="1"
				maxOccurs="unbounded" />

			<element name="action">
				<simpleType>
					<restriction base="string">
						<enumeration value="pause" />
						<enumeration value="unpause" />
					</restriction>
				</simpleType>
			</element>
			<element name="timeStart" type="nonNegativeInteger" />
			<element name="timeEnd" type="nonNegativeInteger" minOccurs="0"
				maxOccurs="1" />
		</sequence>
	</complexType>

</schema>
