<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2013 Andrei Olaru. See the AUTHORS file for more information.
  
  This file is part of AmIciTy-Mi.
  
  AmIciTy-Mi is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
  
  AmIciTy-Mi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License along with AmIciTy-Mi.  If not, see <http://www.gnu.org/licenses/>.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.example.org/moveSchema"
	xmlns:tns="http://www.example.org/moveSchema" elementFormDefault="qualified"
	xmlns:sel="http://www.example.org/selectionSchema">

	<import schemaLocation="./selectionSchema.xsd" namespace="http://www.example.org/selectionSchema" />

	<complexType name="functionMove">
		<sequence>
			<element name="function" type="string" />
			<element name="dependsOn" minOccurs="0" maxOccurs="1">
				<simpleType>
					<restriction base="string">
						<enumeration value="x" />
						<enumeration value="y" />
					</restriction>
				</simpleType>
			</element>
		</sequence>
	</complexType>


	<!-- 
		First function HAVE TO be inside[yes] in theory, because if it's
		inside[false], you try to remove agents in an empty set of agents,
		and because movements is relative to the center of this first area.
		 
		Only agents selected at the start step are selected for the rest of
		the movements of the agents (area is calculate only at start step, 
		and not for the other steps). So, area can't grow up depending 
		of the time.
		
		moveFunctions is for the two dimensions : x and y.
		It calculates the moving of the center of the area, and 
		if you don't specify "dependsOn", it could depend on the former value
		of x and y, and even the time.
		If you specify, it's only for one of the two dimensions. Either x
		depends on the new value of y, either y depends on the new value of x.
		Never the two in the same time (it's logic).
		
		Example (behaviour not checked, it's just an complete example for 
		the values) : 
		
		x function : x+(y/4)+cos(t), dependsOn not specified.
		Behaviour : it will take, at each step, the former location of x and y,
		the current time, and generate the new value of x.
		
		x function : x+(y/4)+cos(t), dependsOn of y.
		y function : y+(x/4)+sin(t), dependsOn HAVE TO NOT been specified
		Behaviour : calculate new y, then calculate x with the new value of y,
		the former value of x, and the current time.
		
		Another simple example for a better understanding :
		x function : x+1, dependsOn not specified.
		y function : y+1, dependsOn not specified.
					equivalent to
		x function : y, dependsOn y.
		y function : y+1, dependsOn not specified.
					equivalent to
		x function : x+1, dependsOn not specified.
		y function : x, dependsOn x.		 			
		
	 -->
	<complexType name="movement">
		<sequence>
			<element name="area" type="sel:areaFunction" minOccurs="1"
				maxOccurs="unbounded" />
			<element name="moveFunctions">
				<complexType>
					<sequence>
						<element name="x" type="tns:functionMove" />
						<element name="y" type="tns:functionMove" />
					</sequence>
				</complexType>
			</element>
			<element name="numberLeap" type="nonNegativeInteger"
				minOccurs="0" />
			<element name="timeStart" type="nonNegativeInteger" />
			<element name="timeEnd" type="nonNegativeInteger" minOccurs="0"
				maxOccurs="1" />
		</sequence>
	</complexType>


</schema>
